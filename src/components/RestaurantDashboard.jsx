import React, { useState, useEffect } from 'react';
import { Link } from 'react-router-dom';
import './RoleDashboards.css';

const RestaurantDashboard = ({ user }) => {
  const [stats, setStats] = useState({
    totalOrders: 0,
    pendingOrders: 0,
    completedOrders: 0,
    revenue: 0
  });
  
  const [loading, setLoading] = useState(true);
  const [activeTab, setActiveTab] = useState('overview');
  const [menuItems, setMenuItems] = useState([]);
  const [orders, setOrders] = useState([]);
  const [showAddItemForm, setShowAddItemForm] = useState(false);
  const [newItem, setNewItem] = useState({
    name: '',
    price: '',
    category: 'Main Course',
    available: true,
    description: '',
    image: ''
  });
  const [categories] = useState([
    'Main Course', 'Appetizers', 'Rice', 'Bread', 'Beverages', 'Desserts', 'Specials'
  ]);
  
  // Mock data - in a real app this would come from API calls
  useEffect(() => {
    const fetchRestaurantData = async () => {
      // Simulate API call
      setTimeout(() => {
        setStats({
          totalOrders: 124,
          pendingOrders: 8,
          completedOrders: 116,
          revenue: 4586.25
        });
        
        setMenuItems([
          { id: 1, name: 'Butter Chicken', price: 12.99, category: 'Main Course', available: true, description: 'Tender chicken in a creamy tomato sauce', image: 'https://example.com/butter-chicken.jpg' },
          { id: 2, name: 'Vegetable Biryani', price: 10.99, category: 'Rice', available: true, description: 'Fragrant rice with mixed vegetables and spices', image: 'https://example.com/veg-biryani.jpg' },
          { id: 3, name: 'Garlic Naan', price: 2.99, category: 'Bread', available: true, description: 'Soft flatbread with garlic and herbs', image: 'https://example.com/garlic-naan.jpg' },
          { id: 4, name: 'Mango Lassi', price: 3.99, category: 'Beverages', available: false, description: 'Refreshing yogurt drink with mango', image: 'https://example.com/mango-lassi.jpg' },
          { id: 5, name: 'Gulab Jamun', price: 4.99, category: 'Desserts', available: true, description: 'Sweet milk dumplings soaked in sugar syrup', image: 'https://example.com/gulab-jamun.jpg' }
        ]);
        
        setOrders([
          { 
            id: 'ORD-001', 
            customer: 'John Doe', 
            items: [
              { name: 'Butter Chicken', quantity: 1, price: 12.99 },
              { name: 'Garlic Naan', quantity: 2, price: 2.99 }
            ],
            total: 28.97, 
            status: 'pending', 
            time: '15 min ago',
            address: '123 Main St, Apt 4B, New York, NY 10001',
            phone: '(555) 123-4567'
          },
          { 
            id: 'ORD-002', 
            customer: 'Jane Smith', 
            items: [
              { name: 'Vegetable Biryani', quantity: 1, price: 10.99 },
              { name: 'Mango Lassi', quantity: 1, price: 3.99 }
            ],
            total: 15.98, 
            status: 'preparing', 
            time: '30 min ago',
            address: '456 Oak Ave, Boston, MA 02108',
            phone: '(555) 987-6543'
          },
          { 
            id: 'ORD-003', 
            customer: 'Robert Johnson', 
            items: [
              { name: 'Butter Chicken', quantity: 1, price: 12.99 },
              { name: 'Vegetable Biryani', quantity: 1, price: 10.99 },
              { name: 'Garlic Naan', quantity: 2, price: 2.99 },
              { name: 'Gulab Jamun', quantity: 2, price: 4.99 }
            ],
            total: 42.96, 
            status: 'ready', 
            time: '45 min ago',
            address: '789 Pine Blvd, Chicago, IL 60007',
            phone: '(555) 321-7890'
          },
          { 
            id: 'ORD-004', 
            customer: 'Emily Brown', 
            items: [
              { name: 'Butter Chicken', quantity: 1, price: 12.99 }
            ],
            total: 12.99, 
            status: 'delivered', 
            time: '1 hour ago',
            address: '101 Lake View Dr, Seattle, WA 98101',
            phone: '(555) 456-7890'
          }
        ]);
        
        setLoading(false);
      }, 800);
    };
    
    fetchRestaurantData();
  }, []);

  // Handle adding a new menu item
  const handleAddItemSubmit = (e) => {
    e.preventDefault();
    
    // Validate inputs
    if (!newItem.name || !newItem.price) {
      alert('Please enter item name and price');
      return;
    }
    
    // Create new item object
    const itemToAdd = {
      id: menuItems.length + 1, // In a real app, this would be generated by the backend
      name: newItem.name,
      price: parseFloat(newItem.price),
      category: newItem.category,
      available: newItem.available,
      description: newItem.description,
      image: newItem.image || 'https://example.com/placeholder.jpg'
    };
    
    // Add to menu items list
    setMenuItems([...menuItems, itemToAdd]);
    
    // Reset form
    setNewItem({
      name: '',
      price: '',
      category: 'Main Course',
      available: true,
      description: '',
      image: ''
    });
    
    // Hide form
    setShowAddItemForm(false);
  };

  // Handle input changes for new item form
  const handleNewItemChange = (e) => {
    const { name, value, type, checked } = e.target;
    setNewItem({
      ...newItem,
      [name]: type === 'checkbox' ? checked : value
    });
  };

  // Handle toggling item availability
  const handleToggleAvailability = (itemId) => {
    setMenuItems(menuItems.map(item => 
      item.id === itemId ? { ...item, available: !item.available } : item
    ));
  };

  // Handle order status change
  const handleOrderStatusChange = (orderId, newStatus) => {
    setOrders(orders.map(order => 
      order.id === orderId ? { ...order, status: newStatus } : order
    ));
  };
  
  if (loading) {
    return (
      <div className="role-dashboard-loading">
        <div className="spinner"></div>
        <p>Loading restaurant dashboard...</p>
      </div>
    );
  }
  
  return (
    <div className="role-dashboard restaurant-dashboard">
      <div className="dashboard-header">
        <h1>Restaurant Dashboard</h1>
        <p>Welcome, {user.fullName || user.username} | Restaurant: {user.restaurantName || 'Your Restaurant'}</p>
      </div>
      
      <div className="dashboard-tabs">
        <button 
          className={`tab-button ${activeTab === 'overview' ? 'active' : ''}`}
          onClick={() => setActiveTab('overview')}
        >
          Overview
        </button>
        <button 
          className={`tab-button ${activeTab === 'menu' ? 'active' : ''}`}
          onClick={() => setActiveTab('menu')}
        >
          Menu Management
        </button>
        <button 
          className={`tab-button ${activeTab === 'orders' ? 'active' : ''}`}
          onClick={() => setActiveTab('orders')}
        >
          Orders
        </button>
        <button 
          className={`tab-button ${activeTab === 'settings' ? 'active' : ''}`}
          onClick={() => setActiveTab('settings')}
        >
          Settings
        </button>
      </div>
      
      <div className="dashboard-content">
        {activeTab === 'overview' && (
          <div className="dashboard-overview">
            <div className="stats-grid">
              <div className="stat-card">
                <h3>Total Orders</h3>
                <div className="stat-value">{stats.totalOrders}</div>
                <div className="stat-icon">📋</div>
              </div>
              <div className="stat-card">
                <h3>Pending Orders</h3>
                <div className="stat-value">{stats.pendingOrders}</div>
                <div className="stat-icon">⏳</div>
              </div>
              <div className="stat-card">
                <h3>Completed Orders</h3>
                <div className="stat-value">{stats.completedOrders}</div>
                <div className="stat-icon">✅</div>
              </div>
              <div className="stat-card">
                <h3>Revenue</h3>
                <div className="stat-value">${stats.revenue.toFixed(2)}</div>
                <div className="stat-icon">💰</div>
              </div>
            </div>
            
            <div className="recent-orders">
              <h3>Recent Orders</h3>
              <table className="orders-table">
                <thead>
                  <tr>
                    <th>Order ID</th>
                    <th>Customer</th>
                    <th>Items</th>
                    <th>Total</th>
                    <th>Status</th>
                    <th>Time</th>
                    <th>Actions</th>
                  </tr>
                </thead>
                <tbody>
                  {orders.map(order => (
                    <tr key={order.id}>
                      <td>{order.id}</td>
                      <td>{order.customer}</td>
                      <td>{order.items.length}</td>
                      <td>${order.total.toFixed(2)}</td>
                      <td>
                        <span className={`status-badge ${order.status}`}>
                          {order.status.charAt(0).toUpperCase() + order.status.slice(1)}
                        </span>
                      </td>
                      <td>{order.time}</td>
                      <td>
                        <button className="view-order-btn" onClick={() => setActiveTab('orders')}>View</button>
                      </td>
                    </tr>
                  ))}
                </tbody>
              </table>
            </div>
          </div>
        )}
        
        {activeTab === 'menu' && (
          <div className="menu-management">
            <div className="section-header">
              <h2>Menu Management</h2>
              <button className="add-item-btn" onClick={() => setShowAddItemForm(!showAddItemForm)}>
                {showAddItemForm ? 'Cancel' : 'Add New Item'}
              </button>
            </div>
            
            {showAddItemForm && (
              <div className="add-item-form">
                <h3>Add New Menu Item</h3>
                <form onSubmit={handleAddItemSubmit}>
                  <div className="form-grid">
                    <div className="form-group">
                      <label htmlFor="name">Item Name*</label>
                      <input 
                        type="text" 
                        id="name" 
                        name="name" 
                        value={newItem.name} 
                        onChange={handleNewItemChange} 
                        required 
                        placeholder="Enter item name"
                      />
                    </div>
                    <div className="form-group">
                      <label htmlFor="price">Price*</label>
                      <input 
                        type="number" 
                        id="price" 
                        name="price" 
                        value={newItem.price} 
                        onChange={handleNewItemChange} 
                        step="0.01" 
                        min="0" 
                        required 
                        placeholder="0.00"
                      />
                    </div>
                    <div className="form-group">
                      <label htmlFor="category">Category</label>
                      <select 
                        id="category" 
                        name="category" 
                        value={newItem.category} 
                        onChange={handleNewItemChange}
                      >
                        {categories.map(category => (
                          <option key={category} value={category}>{category}</option>
                        ))}
                      </select>
                    </div>
                    <div className="form-group">
                      <label htmlFor="available">
                        <input 
                          type="checkbox" 
                          id="available" 
                          name="available" 
                          checked={newItem.available} 
                          onChange={handleNewItemChange} 
                        />
                        Available for Order
                      </label>
                    </div>
                    <div className="form-group full-width">
                      <label htmlFor="description">Description</label>
                      <textarea 
                        id="description" 
                        name="description" 
                        value={newItem.description} 
                        onChange={handleNewItemChange} 
                        placeholder="Enter item description"
                        rows="3"
                      />
                    </div>
                    <div className="form-group full-width">
                      <label htmlFor="image">Image URL</label>
                      <input 
                        type="text" 
                        id="image" 
                        name="image" 
                        value={newItem.image} 
                        onChange={handleNewItemChange} 
                        placeholder="https://example.com/image.jpg"
                      />
                    </div>
                  </div>
                  <div className="form-actions">
                    <button type="submit" className="add-item-submit-btn">Add to Menu</button>
                    <button type="button" className="cancel-btn" onClick={() => setShowAddItemForm(false)}>Cancel</button>
                  </div>
                </form>
              </div>
            )}
            
            <table className="menu-table">
              <thead>
                <tr>
                  <th>Item Name</th>
                  <th>Description</th>
                  <th>Price</th>
                  <th>Category</th>
                  <th>Availability</th>
                  <th>Actions</th>
                </tr>
              </thead>
              <tbody>
                {menuItems.map(item => (
                  <tr key={item.id}>
                    <td>{item.name}</td>
                    <td className="description-cell">{item.description}</td>
                    <td>${item.price.toFixed(2)}</td>
                    <td>{item.category}</td>
                    <td>
                      <span className={`availability-badge ${item.available ? 'available' : 'unavailable'}`}>
                        {item.available ? 'Available' : 'Unavailable'}
                      </span>
                    </td>
                    <td>
                      <button className="edit-btn">Edit</button>
                      <button 
                        className="toggle-btn"
                        onClick={() => handleToggleAvailability(item.id)}
                      >
                        {item.available ? 'Disable' : 'Enable'}
                      </button>
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        )}
        
        {activeTab === 'orders' && (
          <div className="orders-management">
            <h2>Orders Management</h2>
            
            <div className="order-filters">
              <button className="filter-btn active">All Orders</button>
              <button className="filter-btn">New</button>
              <button className="filter-btn">Preparing</button>
              <button className="filter-btn">Ready</button>
              <button className="filter-btn">Delivered</button>
            </div>
            
            <div className="order-list">
              {orders.map(order => (
                <div key={order.id} className={`order-card ${order.status}`}>
                  <div className="order-header">
                    <h3>{order.id}</h3>
                    <span className={`status-badge ${order.status}`}>
                      {order.status.charAt(0).toUpperCase() + order.status.slice(1)}
                    </span>
                  </div>
                  
                  <div className="order-details">
                    <div className="order-info">
                      <p><strong>Customer:</strong> {order.customer}</p>
                      <p><strong>Phone:</strong> {order.phone}</p>
                      <p><strong>Address:</strong> {order.address}</p>
                      <p><strong>Time:</strong> {order.time}</p>
                      <p><strong>Total Amount:</strong> ${order.total.toFixed(2)}</p>
                    </div>
                    
                    <div className="order-items">
                      <h4>Items</h4>
                      <ul>
                        {order.items.map((item, index) => (
                          <li key={index}>
                            {item.quantity} x {item.name} - ${(item.price * item.quantity).toFixed(2)}
                          </li>
                        ))}
                      </ul>
                    </div>
                  </div>
                  
                  <div className="order-actions">
                    {order.status === 'pending' && (
                      <button 
                        className="action-button"
                        onClick={() => handleOrderStatusChange(order.id, 'preparing')}
                      >
                        Accept & Start Preparing
                      </button>
                    )}
                    
                    {order.status === 'preparing' && (
                      <button 
                        className="action-button"
                        onClick={() => handleOrderStatusChange(order.id, 'ready')}
                      >
                        Mark as Ready for Pickup
                      </button>
                    )}
                    
                    {order.status === 'ready' && (
                      <button 
                        className="action-button"
                        onClick={() => handleOrderStatusChange(order.id, 'delivered')}
                      >
                        Confirm Delivery
                      </button>
                    )}
                    
                    {order.status !== 'delivered' && order.status !== 'cancelled' && (
                      <button className="cancel-order-btn">Cancel Order</button>
                    )}
                    
                    <button className="print-order-btn">Print Receipt</button>
                  </div>
                </div>
              ))}
            </div>
          </div>
        )}
        
        {activeTab === 'settings' && (
          <div className="restaurant-settings">
            <h2>Restaurant Settings</h2>
            
            <div className="settings-section">
              <h3>Restaurant Profile</h3>
              <form className="settings-form">
                <div className="form-group">
                  <label htmlFor="restaurantName">Restaurant Name</label>
                  <input type="text" id="restaurantName" placeholder="Your Restaurant Name" defaultValue={user.restaurantName || ''} />
                </div>
                
                <div className="form-group">
                  <label htmlFor="description">Description</label>
                  <textarea id="description" rows="3" placeholder="Tell customers about your restaurant"></textarea>
                </div>
                
                <div className="form-grid">
                  <div className="form-group">
                    <label htmlFor="cuisine">Cuisine Type</label>
                    <select id="cuisine">
                      <option value="">Select Cuisine</option>
                      <option value="indian">Indian</option>
                      <option value="chinese">Chinese</option>
                      <option value="italian">Italian</option>
                      <option value="mexican">Mexican</option>
                      <option value="american">American</option>
                    </select>
                  </div>
                  
                  <div className="form-group">
                    <label htmlFor="phone">Phone Number</label>
                    <input type="tel" id="phone" placeholder="Restaurant Phone Number" />
                  </div>
                </div>
                
                <div className="form-group">
                  <label htmlFor="address">Address</label>
                  <input type="text" id="address" placeholder="Restaurant Address" />
                </div>
                
                <div className="form-actions">
                  <button type="submit" className="save-settings-btn">Save Changes</button>
                </div>
              </form>
            </div>
            
            <div className="settings-section">
              <h3>Operating Hours</h3>
              <div className="hours-setup">
                {['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'].map(day => (
                  <div key={day} className="day-hours">
                    <div className="day-name">{day}</div>
                    <div className="hours-inputs">
                      <input type="time" defaultValue="10:00" /> to <input type="time" defaultValue="22:00" />
                    </div>
                    <label>
                      <input type="checkbox" defaultChecked={true} /> Open
                    </label>
                  </div>
                ))}
                <div className="form-actions">
                  <button type="button" className="save-settings-btn">Save Hours</button>
                </div>
              </div>
            </div>
          </div>
        )}
      </div>
    </div>
  );
};

export default RestaurantDashboard; 